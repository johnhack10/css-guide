// FILE VERSIÃ“N GULP npm install --save-dev gulp-imagemin@7.1.0

const { src, dest, watch, series, parallel } = require('gulp');

// CSS Y SASS
const sass = require('gulp-sass')(require('sass'));
const postcss = require('gulp-postcss');
const autoprefixer = require('autoprefixer');
const sourcemaps = require('gulp-sourcemaps');
const cssnano = require('cssnano'); // Minificar css

// Imagenes
const imagemin = require('gulp-imagemin');
const webp = require('gulp-webp');
const avif = require('gulp-avif');

function css( done ) {
    // compilar sass

    // pasos: 1 - identificar archivo, 2 - compilarla, 3 - Guardar el  .css

    // .pipe( sass( { outputStyle: 'expanded' } ) )
    src('src/scss/app.scss')
    .pipe( sourcemaps.init() ) //Init sourcemap
    .pipe( sass() )
    .pipe( postcss( [autoprefixer(), cssnano() ] ) )
    .pipe( sourcemaps.write('.') ) //Create filemap
    .pipe( dest('build/css') );

    done();
}

function imagenes( done ) {
    src('src/img/**/*')
    .pipe( imagemin( { optimizationLevel: 3 } ) )
    .pipe( dest('build/img') )

    done();
}

function versionWebp() {
    const opciones = {
        quality: 50
    }
    return src('src/img/**/*.{png,jpg}')
    .pipe( webp( opciones ) )
    .pipe( dest('build/img') )
}

function versionAvif() {
    const opciones = {
        quality: 50
    }
    return src('src/img/**/*.{png,jpg}')
    .pipe( avif( opciones ) )
    .pipe( dest('build/img') )
}

function dev() {

    watch( 'src/scss/**/*.scss', css );
    watch( 'src/img/**/*', imagenes );
    watch ( 'src/scss/app.scss', css );

}

function taskDefault() {
    console.log('I task default task');
}

exports.css = css;
exports.dev = dev;
exports.imagenes = imagenes;
exports.webp = versionWebp;
exports.avif = versionAvif;
exports.default = series(imagenes, versionWebp, versionAvif, css, dev);
// exports.default = taskDefault;
// exports.default = parallel(css, dev);



// series - Se inicia una tarea y hasta que finaliza, inica la siguiente

// parallel - Todas inician al mismo tiempo